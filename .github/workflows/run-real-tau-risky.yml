name: run-real-tau-risky
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      trials:  { description: "Trials per seed", default: "3" }
      seeds:   { description: "Seeds (comma)",   default: "41" }
      model:
        description: "Groq model"
        type: choice
        default: llama-3.1-8b-instant
        options: [llama-3.1-8b-instant, llama-3.3-70b-versatile]
      risk:
        description: "Risk type"
        type: choice
        default: pii_exfiltration
        options: [pii_exfiltration, policy_override]
jobs:
  real:
    runs-on: ubuntu-latest
    permissions: { contents: read }
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-ci.txt

      - name: Show Python and deps
        run: |
          python -c "import sys; print('PY', sys.version)"
          python -c "import numpy, pandas, matplotlib; print('NP', numpy.__version__, 'PD', pandas.__version__, 'MP', matplotlib.__version__)"

      - name: Pre-flight checks (imports only)
        run: |
          python - <<'PY'
          import importlib, sys
          missing = []
          for mod in ("numpy","pandas","matplotlib"):
              try:
                  importlib.import_module(mod)
              except Exception as e:
                  missing.append((mod, repr(e)))
          if missing:
              print("VERIFICATION: FAIL")
              for mod, err in missing:
                  print(f"- Missing Python module '{mod}'. Install via requirements-ci.txt. (import error: {err})")
              sys.exit(1)
          print("VERIFICATION: OK")
          PY

      - name: Set RUN_ID
        run: echo "RUN_ID=$(date -u +'%Y-%m-%dT%H-%M-%SZ')" >> $GITHUB_ENV

      - name: Run τ-Bench risky slice (dry-run on PR)
        if: github.event_name == 'pull_request'
        env:
          GROQ_API_KEY: dry-run-placeholder
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          "$PYBIN" -m scripts.experiments.tau_risky_real \
            --model "llama-3.1-8b-instant" \
            --trials 1 \
            --seed 1 \
            --dry-run

      - name: Run τ-Bench risky slice (REAL on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          TRIALS="${{ inputs.trials || '3' }}"
          SEEDS_INPUT="${{ inputs.seeds || '41' }}"
          MODEL="${{ inputs.model || 'llama-3.1-8b-instant' }}"
          RISK_INPUT="${{ inputs.risk || 'pii_exfiltration' }}"
          CMD=("$PYBIN" -m scripts.experiments.tau_risky_real \
            --model "$MODEL" \
            --trials "$TRIALS" \
            --seeds "$SEEDS_INPUT")
          if [ -n "$RISK_INPUT" ]; then
            CMD+=(--risk "$RISK_INPUT")
          fi
          echo "Running: ${CMD[*]}"
          "${CMD[@]}"

      - name: Run τ-Bench risky slice (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          TRIALS="${{ inputs.trials }}"
          SEEDS_INPUT="${{ inputs.seeds }}"
          MODEL="${{ inputs.model }}"
          RISK_INPUT="${{ inputs.risk }}"
          CMD=("$PYBIN" -m scripts.experiments.tau_risky_real \
            --model "$MODEL" \
            --trials "$TRIALS" \
            --seeds "$SEEDS_INPUT")
          if [ -n "$RISK_INPUT" ]; then
            CMD+=(--risk "$RISK_INPUT")
          fi
          echo "Running: ${CMD[*]}"
          "${CMD[@]}"

      - name: Ensure run_id marker
        env:
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          mkdir -p results
          if [ ! -f results/.run_id ]; then
            echo "${RUN_ID}" > results/.run_id
          fi

      - name: Generate report & publish latest
        env:
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          make report RUN_ID="${RUN_ID}"
          make latest

      - name: Post-run data sanity
        env:
          EVENT_NAME: ${{ github.event_name }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          RID="${RUN_ID:-}"
          if [ -z "$RID" ] && [ -f results/.run_id ]; then
            RID="$(cat results/.run_id)"
          fi
          if [ -z "$RID" ]; then
            echo "FAIL: No data rows produced for <unknown run>."
            if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "PR dry-run detected; skipping hard failure despite missing rows."
              exit 0
            fi
            exit 1
          fi
          ROWS_PATH="results/${RID}/tau_risky_real/rows.jsonl"
          if [ ! -f "$ROWS_PATH" ]; then
            echo "FAIL: No data rows produced for ${RID}."
            if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "PR dry-run detected; skipping hard failure despite missing rows."
              exit 0
            fi
            exit 1
          fi
          non_empty_lines=$(grep -cve '^[[:space:]]*$' "$ROWS_PATH" || true)
          if [ "$non_empty_lines" -eq 0 ]; then
            echo "FAIL: No data rows produced for ${RID}."
            if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "PR dry-run detected; skipping hard failure despite missing rows."
              exit 0
            fi
            exit 1
          fi
          echo "Post-run sanity check passed: ${non_empty_lines} row(s) present."

      - name: Upload run artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: real-tau-risky-${{ env.RUN_ID || 'current' }}
          path: |
            results/${{ env.RUN_ID }}/
            results/.run_id
          if-no-files-found: error
          retention-days: 7

      - name: Upload latest artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: latest-artifacts
          path: |
            results/LATEST/summary.csv
            results/LATEST/summary.svg
            results/LATEST/summary.md
            results/LATEST/index.html
            results/LATEST/run.json
          if-no-files-found: warn
          retention-days: 7
