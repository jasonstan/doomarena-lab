name: "Run REAL MVP"

on:
  workflow_dispatch:
    inputs:
      model:
        description: "Groq model id"
        required: true
        default: "llama-3.1-8b-instant"
      trials:
        description: "Trials per seed"
        required: true
        default: "3"
      seeds:
        description: "Comma-separated seeds"
        required: true
        default: "41,42"

# Need write to publish artifacts; keep repo read
permissions:
  contents: read
  actions: write

jobs:
  real:
    name: "REAL Ï„-Bench risky (Groq)"
    if: ${{ github.repository_owner == 'jasonstan' }}
    runs-on: ubuntu-latest
    env:
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install
        run: make install

      - name: REAL run (set RUN_ID, execute, publish)
        id: real
        shell: bash
        env:
          REAL_MODEL: ${{ inputs.model }}
          TRIALS: ${{ inputs.trials }}
          SEEDS: ${{ inputs.seeds }}
        run: |
          set -euo pipefail

          # Single RUN_ID for the whole session
          RUN_ID="$(date -u '+%Y%m%d-%H%M%S')"
          echo "$RUN_ID" > results/.run_id
          echo "RUN_ID=$RUN_ID" >> "$GITHUB_ENV"
          echo "run_id=$RUN_ID" >> "$GITHUB_OUTPUT"

          # Execute the REAL risky run (Groq) via make
          # Target should read REAL_MODEL/TRIALS/SEEDS from env and honor RUN_ID
          make real-tau-risky TRIALS="${TRIALS}" SEEDS="${SEEDS}" REAL_MODEL="${REAL_MODEL}"

          # Create report & update LATEST marker
          make report RUN_ID="${RUN_ID}"
          make latest


      - name: Verify REAL artifacts
        run: |
          python scripts/assert_real_artifacts.py \
            --html "results/${RUN_ID}/index.html" \
            --html "results/LATEST/index.html" \
            --svg "results/${RUN_ID}/summary.svg" \
            --svg "results/LATEST/summary.svg"

      - name: Diagnose outputs (list RUN_DIR and preview CSV)
        if: always()
        run: |
          RID="${RUN_ID:-}"
          if [ -z "$RID" ] && [ -f results/.run_id ]; then
            RID="$(cat results/.run_id)"
          fi

          if [ -n "$RID" ]; then
            echo "RUN_ID=$RID"
          else
            echo "RUN_ID not available"
          fi

          echo

          if [ -n "$RID" ] && [ -d "results/$RID" ]; then
            echo "Tree of results/$RID (max depth 2):"
            find "results/$RID" -maxdepth 2 -type f -print | sort || true

            echo
            echo "Summary CSV (first 10 lines):"
            if [ -f "results/$RID/summary.csv" ]; then
              head -n 10 "results/$RID/summary.csv" || true
              echo
              echo "Line count:"
              wc -l "results/$RID/summary.csv" || true
            else
              echo "results/$RID/summary.csv not found"
            fi
          elif [ -n "$RID" ]; then
            echo "Run directory results/$RID not found"
          else
            echo "Run directory could not be determined"
          fi

      - name: Upload per-run artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-${{ steps.real.outputs.run_id || 'current' }}
          path: |
            results/${{ env.RUN_ID }}/summary.csv
            results/${{ env.RUN_ID }}/summary.svg
            results/${{ env.RUN_ID }}/index.html
            results/${{ env.RUN_ID }}/run.json
          if-no-files-found: error
          retention-days: 7

      - name: Upload latest artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: latest-artifacts
          path: |
            results/LATEST/summary.csv
            results/LATEST/summary.svg
            results/LATEST/index.html
            results/LATEST/run.json
          if-no-files-found: error
          retention-days: 7
