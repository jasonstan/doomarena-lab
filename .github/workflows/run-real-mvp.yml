name: "Run REAL MVP"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      model:
        description: "Groq model id"
        required: true
        default: "llama-3.1-8b-instant"
      trials:
        description: "Trials per seed"
        required: true
        default: 3
        type: number
      seeds:
        description: "Seed"
        required: true
        default: 42
        type: number
      max_total_tokens:
        description: "Run token cap"
        required: false
        type: number
      max_calls:
        description: "Max provider calls"
        required: false
        type: number
      temperature:
        description: "Sampling temperature"
        required: true
        default: 0.2
        type: number
      fail_on_budget:
        description: "Exit non-zero when budget hit"
        required: true
        default: false
        type: boolean
      dry_run:
        description: "Force dry-run (manual dispatch only)"
        required: true
        default: false
        type: boolean

# Cap workflow_dispatch inputs at eight to satisfy GitHub's limit.
# Need write to publish artifacts; keep repo read
permissions:
  contents: read
  actions: write

jobs:
  real:
    name: "REAL τ-Bench risky (Groq)"
    if: ${{ github.repository_owner == 'jasonstan' }}
    runs-on: ubuntu-latest
    env:
      STRICT: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.strict) || vars.THRESHOLD_STRICT || vars.STRICT || '' }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-ci.txt

      - name: Pre-flight config validation
        run: python tools/ci_preflight.py

      - name: Set RUN_ID
        shell: bash
        run: echo "RUN_ID=$(date -u +'%Y-%m-%dT%H-%M-%SZ')" >> $GITHUB_ENV

      - name: Show Python and dep versions
        shell: bash
        run: |
          python - <<'PY'
          import sys, numpy, pandas, matplotlib
          print("PY:", sys.version)
          print("NP:", numpy.__version__, "PD:", pandas.__version__, "MP:", matplotlib.__version__)
          PY

      - name: Pre-flight checks (env + imports)
        if: github.event_name != 'pull_request'
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        shell: bash
        run: |
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          "$PYBIN" tools/verify_latest_setup.py \
            --skip-default-checks \
            --require-env GROQ_API_KEY

      - name: Run REAL τ slice (dry-run on PR)
        if: github.event_name == 'pull_request'
        env:
          GROQ_API_KEY: dry-run-placeholder
          RUN_ID: ${{ env.RUN_ID }}
        shell: bash
        run: |
          set -euo pipefail
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          "$PYBIN" -m scripts.experiments.tau_risky_real \
            --model "llama-3.1-8b-instant" \
            --trials 1 \
            --seed 1 \
            --dry-run

      - name: Run REAL τ slice (REAL on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          RUN_ID: ${{ env.RUN_ID }}
        shell: bash
        run: |
          set -euo pipefail
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          MODEL="${{ inputs.model || 'llama-3.1-8b-instant' }}"
          TRIALS="${{ inputs.trials || '3' }}"
          SEEDS_INPUT="${{ inputs.seeds || '41,42' }}"
          MAX_TOTAL="${{ inputs.max_total_tokens || '' }}"
          MAX_CALLS="${{ inputs.max_calls || '' }}"
          TEMPERATURE="${{ inputs.temperature || '' }}"
          FAIL_ON_BUDGET="${{ inputs.fail_on_budget && 'true' || '' }}"
          CMD=("$PYBIN" -m scripts.experiments.tau_risky_real \
            --model "$MODEL" \
            --trials "$TRIALS" \
            --seeds "$SEEDS_INPUT")
          if [ -n "$MAX_TOTAL" ]; then
            CMD+=(--max-total-tokens "$MAX_TOTAL")
          fi
          if [ -n "$MAX_CALLS" ]; then
            CMD+=(--max-calls "$MAX_CALLS")
          fi
          if [ -n "$TEMPERATURE" ]; then
            CMD+=(--temperature "$TEMPERATURE")
          fi
          if [ "$FAIL_ON_BUDGET" = 'true' ]; then
            CMD+=(--fail-on-budget)
          fi
          echo "Running: ${CMD[*]}"
          "${CMD[@]}"

      - name: Run REAL τ slice (manual dispatch)
        if: github.event_name == 'workflow_dispatch'
        env:
          RUN_ID: ${{ env.RUN_ID }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          python -m scripts.experiments.tau_risky_real \
            --model "${{ inputs.model }}" \
            --trials "${{ inputs.trials }}" \
            --seed "${{ inputs.seeds }}" \
            ${{ inputs.max_total_tokens && format('--max-total-tokens {0}', inputs.max_total_tokens) || '' }} \
            ${{ inputs.max_calls && format('--max-calls {0}', inputs.max_calls) || '' }} \
            --temperature "${{ inputs.temperature }}" \
            ${{ inputs.fail_on_budget && '--fail-on-budget' || '' }} \
            ${{ inputs.dry_run && '--dry-run' || '' }}

      - name: Ensure run_id marker
        env:
          RUN_ID: ${{ env.RUN_ID }}
        shell: bash
        run: |
          mkdir -p results
          if [ ! -f results/.run_id ]; then
            echo "${RUN_ID}" > results/.run_id
          fi

      - name: Generate report & publish latest
        env:
          RUN_ID: ${{ env.RUN_ID }}
        shell: bash
        run: |
          make report RUN_ID="${RUN_ID}"
          make latest

      - name: Ensure index.html exists (fallback render)
        env:
          RUN_ID: ${{ env.RUN_ID }}
        shell: bash
        run: |
          set -euxo pipefail
          RUN_DIR="results/${RUN_ID}"
          [ -d "$RUN_DIR" ] || (echo "Run dir not found: $RUN_DIR" >&2; exit 1)
          if [ ! -s "$RUN_DIR/index.html" ]; then
            python tools/mk_report.py "$RUN_DIR" || true
          fi

      - name: Verify REAL artifacts
        env:
          RUN_ID: ${{ env.RUN_ID }}
        shell: bash
        run: |
          set -euxo pipefail
          echo "RUN_ID=${RUN_ID}"
          RUN_DIR="results/${RUN_ID}"
          test -s "${RUN_DIR}/index.html"
          test -s "${RUN_DIR}/summary.svg"
          test -s "${RUN_DIR}/summary.csv"
          if [ -f "${RUN_DIR}/summary_index.json" ]; then
            ls -l "${RUN_DIR}/summary_index.json"
          else
            echo "NOTE: summary_index.json not found (fallback path)"
          fi

      - name: Post-run data sanity
        env:
          EVENT_NAME: ${{ github.event_name }}
          RUN_ID: ${{ env.RUN_ID }}
        shell: bash
        run: |
          set -euo pipefail
          RID="${RUN_ID:-}"
          if [ -z "$RID" ] && [ -f results/.run_id ]; then
            RID="$(cat results/.run_id)"
          fi
          if [ -z "$RID" ]; then
            echo "FAIL: No data rows produced for <unknown run>. Check provider secret, network, or pre-gate denials."
            if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "PR dry-run detected; skipping hard failure despite missing rows."
              exit 0
            fi
            exit 1
          fi
          ROWS_PATH="results/${RID}/tau_risky_real/rows.jsonl"
          if [ ! -f "$ROWS_PATH" ]; then
            echo "FAIL: No data rows produced for ${RID}. Check provider secret, network, or pre-gate denials."
            if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "PR dry-run detected; skipping hard failure despite missing rows."
              exit 0
            fi
            exit 1
          fi
          non_empty_lines=$(grep -cve '^[[:space:]]*$' "$ROWS_PATH" || true)
          if [ "$non_empty_lines" -eq 0 ]; then
            echo "FAIL: No data rows produced for ${RID}. Check provider secret, network, or pre-gate denials."
            if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "PR dry-run detected; skipping hard failure despite missing rows."
              exit 0
            fi
            exit 1
          fi
          echo "Post-run sanity check passed: ${non_empty_lines} row(s) present."

      - name: Threshold summary
        if: always()
        shell: bash
        continue-on-error: ${{ !(env.STRICT == '1' || env.STRICT == 'true' || env.STRICT == 'TRUE' || env.STRICT == 'True') }}
        env:
          RUN_ID: ${{ env.RUN_ID }}
          STRICT: ${{ env.STRICT }}
        run: |
          set -euo pipefail
          STRICT_VALUE="${STRICT:-0}"
          make check-thresholds STRICT="${STRICT_VALUE}"

      - name: Diagnose outputs (list RUN_DIR and preview CSV)
        if: always()
        shell: bash
        run: |
          RID="${RUN_ID:-}"
          if [ -z "$RID" ] && [ -f results/.run_id ]; then
            RID="$(cat results/.run_id)"
          fi

          if [ -n "$RID" ]; then
            echo "RUN_ID=$RID"
          else
            echo "RUN_ID not available"
          fi

          echo

          if [ -n "$RID" ] && [ -d "results/$RID" ]; then
            echo "Tree of results/$RID (max depth 2):"
            find "results/$RID" -maxdepth 2 -type f -print | sort || true

            echo
            echo "Summary CSV (first 10 lines):"
            if [ -f "results/$RID/summary.csv" ]; then
              head -n 10 "results/$RID/summary.csv" || true
              echo
              echo "Line count:"
              wc -l "results/$RID/summary.csv" || true
            else
              echo "results/$RID/summary.csv not found"
            fi
          elif [ -n "$RID" ]; then
            echo "Run directory results/$RID not found"
          else
            echo "Run directory could not be determined"
          fi

      - name: Upload per-run artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-${{ env.RUN_ID || 'current' }}
          path: |
            results/${{ env.RUN_ID }}/**
          if-no-files-found: error
          retention-days: 7

      - name: Upload latest artifacts
        if: ${{ always() && hashFiles('results/LATEST/index.html') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: latest-artifacts
          path: |
            results/LATEST/**
          if-no-files-found: warn
          retention-days: 7
