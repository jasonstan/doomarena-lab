name: "Run REAL MVP"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      model:
        description: "Groq model id"
        required: true
        default: "llama-3.1-8b-instant"
      trials:
        description: "Trials per seed"
        required: true
        default: "3"
      seeds:
        description: "Comma-separated seeds"
        required: true
        default: "41,42"
      max_trails:
        description: "Optional max-trials override (typo-safe input)"
        required: false
        default: ""
      max_trials:
        description: "Optional cap on callable trials"
        required: false
        default: ""
      max_total_tokens:
        description: "Optional run-level total token ceiling"
        required: false
        default: ""
      max_prompt_tokens:
        description: "Optional prompt token ceiling"
        required: false
        default: ""
      max_completion_tokens:
        description: "Optional completion token ceiling"
        required: false
        default: ""
      max_calls:
        description: "Optional provider call cap"
        required: false
        default: ""
      temperature:
        description: "Optional sampling temperature override"
        required: false
        default: ""
      dry_run:
        description: "Skip provider calls (dry run)"
        required: false
        type: boolean
        default: false
      fail_on_budget:
        description: "Exit non-zero when a budget limit is hit"
        required: false
        type: boolean
        default: false

# Need write to publish artifacts; keep repo read
permissions:
  contents: read
  actions: write

jobs:
  real:
    name: "REAL τ-Bench risky (Groq)"
    if: ${{ github.repository_owner == 'jasonstan' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-ci.txt

      - name: Set RUN_ID
        run: echo "RUN_ID=$(date -u +'%Y-%m-%dT%H-%M-%SZ')" >> $GITHUB_ENV

      - name: Pre-flight checks (imports only)
        run: python tools/ci_preflight.py

      - name: Show Python and dep versions
        run: |
          python - <<'PY'
import sys, numpy, pandas, matplotlib
print("PY:", sys.version)
print("NP:", numpy.__version__, "PD:", pandas.__version__, "MP:", matplotlib.__version__)
PY

      - name: Pre-flight checks (env + imports)
        if: github.event_name != 'pull_request'
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          "$PYBIN" tools/verify_latest_setup.py \
            --skip-default-checks \
            --require-env GROQ_API_KEY

      - name: Run REAL τ slice (dry-run on PR)
        if: github.event_name == 'pull_request'
        env:
          GROQ_API_KEY: dry-run-placeholder
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          "$PYBIN" -m scripts.experiments.tau_risky_real \
            --model "llama-3.1-8b-instant" \
            --trials 1 \
            --seed 1 \
            --dry-run

      - name: Run REAL τ slice (REAL on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          MODEL="${{ inputs.model || 'llama-3.1-8b-instant' }}"
          TRIALS="${{ inputs.trials || '3' }}"
          SEEDS_INPUT="${{ inputs.seeds || '41,42' }}"
          MAX_TRAILS="${{ inputs.max_trails || '' }}"
          MAX_TRIALS="${{ inputs.max_trials || '' }}"
          MAX_TOTAL="${{ inputs.max_total_tokens || '' }}"
          MAX_PROMPT="${{ inputs.max_prompt_tokens || '' }}"
          MAX_COMPLETION="${{ inputs.max_completion_tokens || '' }}"
          MAX_CALLS="${{ inputs.max_calls || '' }}"
          TEMPERATURE="${{ inputs.temperature || '' }}"
          FAIL_ON_BUDGET="${{ inputs.fail_on_budget && 'true' || '' }}"
          CMD=("$PYBIN" -m scripts.experiments.tau_risky_real \
            --model "$MODEL" \
            --trials "$TRIALS" \
            --seeds "$SEEDS_INPUT")
          if [ -n "$MAX_TRAILS" ]; then
            CMD+=(--max-trials "$MAX_TRAILS")
          elif [ -n "$MAX_TRIALS" ]; then
            CMD+=(--max-trials "$MAX_TRIALS")
          fi
          if [ -n "$MAX_TOTAL" ]; then
            CMD+=(--max-total-tokens "$MAX_TOTAL")
          fi
          if [ -n "$MAX_PROMPT" ]; then
            CMD+=(--max-prompt-tokens "$MAX_PROMPT")
          fi
          if [ -n "$MAX_COMPLETION" ]; then
            CMD+=(--max-completion-tokens "$MAX_COMPLETION")
          fi
          if [ -n "$MAX_CALLS" ]; then
            CMD+=(--max-calls "$MAX_CALLS")
          fi
          if [ -n "$TEMPERATURE" ]; then
            CMD+=(--temperature "$TEMPERATURE")
          fi
          if [ "$FAIL_ON_BUDGET" = 'true' ]; then
            CMD+=(--fail-on-budget)
          fi
          echo "Running: ${CMD[*]}"
          "${CMD[@]}"

      - name: Run REAL τ slice (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          MODEL="${{ inputs.model }}"
          TRIALS="${{ inputs.trials }}"
          SEEDS_INPUT="${{ inputs.seeds }}"
          MAX_TRAILS="${{ inputs.max_trails || '' }}"
          MAX_TRIALS="${{ inputs.max_trials || '' }}"
          MAX_TOTAL="${{ inputs.max_total_tokens || '' }}"
          MAX_PROMPT="${{ inputs.max_prompt_tokens || '' }}"
          MAX_COMPLETION="${{ inputs.max_completion_tokens || '' }}"
          MAX_CALLS="${{ inputs.max_calls || '' }}"
          TEMPERATURE="${{ inputs.temperature || '' }}"
          DRY_RUN_INPUT="${{ inputs.dry_run && 'true' || '' }}"
          FAIL_ON_BUDGET="${{ inputs.fail_on_budget && 'true' || '' }}"
          CMD=("$PYBIN" -m scripts.experiments.tau_risky_real \
            --model "$MODEL" \
            --trials "$TRIALS" \
            --seeds "$SEEDS_INPUT")
          if [ -n "$MAX_TRAILS" ]; then
            CMD+=(--max-trials "$MAX_TRAILS")
          elif [ -n "$MAX_TRIALS" ]; then
            CMD+=(--max-trials "$MAX_TRIALS")
          fi
          if [ -n "$MAX_TOTAL" ]; then
            CMD+=(--max-total-tokens "$MAX_TOTAL")
          fi
          if [ -n "$MAX_PROMPT" ]; then
            CMD+=(--max-prompt-tokens "$MAX_PROMPT")
          fi
          if [ -n "$MAX_COMPLETION" ]; then
            CMD+=(--max-completion-tokens "$MAX_COMPLETION")
          fi
          if [ -n "$MAX_CALLS" ]; then
            CMD+=(--max-calls "$MAX_CALLS")
          fi
          if [ -n "$TEMPERATURE" ]; then
            CMD+=(--temperature "$TEMPERATURE")
          fi
          if [ "$DRY_RUN_INPUT" = 'true' ]; then
            CMD+=(--dry-run)
          fi
          if [ "$FAIL_ON_BUDGET" = 'true' ]; then
            CMD+=(--fail-on-budget)
          fi
          echo "Running: ${CMD[*]}"
          "${CMD[@]}"

      - name: Ensure run_id marker
        env:
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          mkdir -p results
          if [ ! -f results/.run_id ]; then
            echo "${RUN_ID}" > results/.run_id
          fi

      - name: Generate report & publish latest
        env:
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          make report RUN_ID="${RUN_ID}"
          make latest

      - name: Post-run data sanity
        env:
          EVENT_NAME: ${{ github.event_name }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          RID="${RUN_ID:-}"
          if [ -z "$RID" ] && [ -f results/.run_id ]; then
            RID="$(cat results/.run_id)"
          fi
          if [ -z "$RID" ]; then
            echo "FAIL: No data rows produced for <unknown run>. Check provider secret, network, or pre-gate denials."
            if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "PR dry-run detected; skipping hard failure despite missing rows."
              exit 0
            fi
            exit 1
          fi
          ROWS_PATH="results/${RID}/tau_risky_real/rows.jsonl"
          if [ ! -f "$ROWS_PATH" ]; then
            echo "FAIL: No data rows produced for ${RID}. Check provider secret, network, or pre-gate denials."
            if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "PR dry-run detected; skipping hard failure despite missing rows."
              exit 0
            fi
            exit 1
          fi
          non_empty_lines=$(grep -cve '^[[:space:]]*$' "$ROWS_PATH" || true)
          if [ "$non_empty_lines" -eq 0 ]; then
            echo "FAIL: No data rows produced for ${RID}. Check provider secret, network, or pre-gate denials."
            if [ "$EVENT_NAME" = "pull_request" ]; then
              echo "PR dry-run detected; skipping hard failure despite missing rows."
              exit 0
            fi
            exit 1
          fi
          echo "Post-run sanity check passed: ${non_empty_lines} row(s) present."

      - name: Verify REAL artifacts
        run: |
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          "$PYBIN" scripts/assert_real_artifacts.py \
            --html "results/${RUN_ID}/index.html" \
            --html "results/LATEST/index.html" \
            --svg "results/${RUN_ID}/summary.svg" \
            --svg "results/LATEST/summary.svg"

      - name: Diagnose outputs (list RUN_DIR and preview CSV)
        if: always()
        run: |
          RID="${RUN_ID:-}"
          if [ -z "$RID" ] && [ -f results/.run_id ]; then
            RID="$(cat results/.run_id)"
          fi

          if [ -n "$RID" ]; then
            echo "RUN_ID=$RID"
          else
            echo "RUN_ID not available"
          fi

          echo

          if [ -n "$RID" ] && [ -d "results/$RID" ]; then
            echo "Tree of results/$RID (max depth 2):"
            find "results/$RID" -maxdepth 2 -type f -print | sort || true

            echo
            echo "Summary CSV (first 10 lines):"
            if [ -f "results/$RID/summary.csv" ]; then
              head -n 10 "results/$RID/summary.csv" || true
              echo
              echo "Line count:"
              wc -l "results/$RID/summary.csv" || true
            else
              echo "results/$RID/summary.csv not found"
            fi
          elif [ -n "$RID" ]; then
            echo "Run directory results/$RID not found"
          else
            echo "Run directory could not be determined"
          fi

      - name: Upload per-run artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-${{ env.RUN_ID || 'current' }}
          path: |
            results/${{ env.RUN_ID }}/
            results/.run_id
          if-no-files-found: error
          retention-days: 7

      - name: Upload latest artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: latest-artifacts
          path: |
            results/LATEST/summary.csv
            results/LATEST/summary.svg
            results/LATEST/index.html
            results/LATEST/run.json
          if-no-files-found: warn
          retention-days: 7
