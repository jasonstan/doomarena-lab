name: "Run REAL MVP"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      model:
        description: "Groq model id"
        required: true
        default: "llama-3.1-8b-instant"
      trials:
        description: "Trials per seed"
        required: true
        default: 3
        type: number
      seeds:
        description: "Seed"
        required: true
        default: 42
        type: number
      max_total_tokens:
        description: "Run-level token cap"
        required: false
        type: number
      max_calls:
        description: "Max provider calls"
        required: false
        type: number
      temperature:
        description: "Sampling temperature"
        required: true
        default: 0.2
        type: number
      fail_on_budget:
        description: "Exit non-zero when budget hit"
        required: true
        default: false
        type: boolean
      dry_run:
        description: "Force dry-run (manual dispatch only)"
        required: true
        default: false
        type: boolean

# Need write to publish artifacts; keep repo read
permissions:
  contents: read
  actions: write

jobs:
  real:
    name: "REAL τ-Bench risky (Groq)"
    if: ${{ github.repository_owner == 'jasonstan' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install
        run: make install

      - name: Set RUN_ID
        run: echo "RUN_ID=$(date -u +'%Y-%m-%dT%H-%M-%SZ')" >> "$GITHUB_ENV"

      - name: Pre-flight checks (imports only)
        if: github.event_name == 'pull_request'
        run: |
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          "$PYBIN" tools/verify_latest_setup.py \
            --skip-default-checks \
            --require-import yaml \
            --require-import pandas \
            --require-import matplotlib

      - name: Pre-flight checks (env + imports)
        if: github.event_name != 'pull_request'
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          "$PYBIN" tools/verify_latest_setup.py \
            --skip-default-checks \
            --require-env GROQ_API_KEY \
            --require-import yaml \
            --require-import pandas \
            --require-import matplotlib

      - name: Run REAL τ slice (dry-run on PR)
        if: github.event_name == 'pull_request'
        env:
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          "$PYBIN" -m scripts.experiments.tau_risky_real \
            --model "llama-3.1-8b-instant" \
            --trials 1 \
            --seed 1 \
            --dry-run

      - name: Run REAL τ slice (REAL on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          set -euo pipefail
          PYBIN="python"
          if [ -x ".venv/bin/python" ]; then
            PYBIN=".venv/bin/python"
          fi
          "$PYBIN" -m scripts.experiments.tau_risky_real \
            --model "${{ inputs.model || 'llama-3.1-8b-instant' }}" \
            --trials "${{ inputs.trials || 3 }}" \
            --seed "${{ inputs.seeds || 42 }}"

      - name: Run REAL τ slice (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          RUN_ID: ${{ env.RUN_ID }}
        run: |
          python -m scripts.experiments.tau_risky_real \
            --model "${{ inputs.model }}" \
            --trials "${{ inputs.trials }}" \
            --seed "${{ inputs.seeds }}" \
            ${{ inputs.max_total_tokens && format('--max-total-tokens {0}', inputs.max_total_tokens) || '' }} \
            ${{ inputs.max_calls && format('--max-calls {0}', inputs.max_calls) || '' }} \
            --temperature "${{ inputs.temperature }}" \
            ${{ inputs.fail_on_budget && '--fail-on-budget' || '' }} \
            ${{ inputs.dry_run && '--dry-run' || '' }}

      - name: Aggregate & build report
        run: |
          python -m scripts.aggregate_results --run_id "$RUN_ID" || true
          mkdir -p results
          [ -f results/.run_id ] || echo "$RUN_ID" > results/.run_id

      - name: Upload run folder
        uses: actions/upload-artifact@v4
        with:
          name: run-${{ env.RUN_ID }}
          path: results/${{ env.RUN_ID }}/
          if-no-files-found: error

      - name: Upload run-id pointer
        uses: actions/upload-artifact@v4
        with:
          name: run-id
          path: results/.run_id
          if-no-files-found: ignore
