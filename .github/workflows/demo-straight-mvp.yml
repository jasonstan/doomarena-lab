name: demo-straight-mvp

on:
  workflow_dispatch:
    inputs:
      provider:
        type: choice
        options: [groq, openai, mock]
        default: groq
      model:
        type: string
        default: llama-3.1-8b-instant
      trials:
        type: number
        default: 10
      temperature:
        type: number
        default: 0.0
      seed:
        type: number
        default: 42
      allow_mock_fallback:
        description: "If real key is missing, auto-switch to mock"
        type: boolean
        default: false

jobs:
  mvp:
    runs-on: ubuntu-latest
    env:
      PROVIDER: ${{ inputs.provider }}
      MODEL_ID: ${{ inputs.model }}
      TRIALS: ${{ inputs.trials }}
      TEMPERATURE: ${{ inputs.temperature }}
      SEED: ${{ inputs.seed }}
      ALLOW_MOCK: ${{ inputs.allow_mock_fallback }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GROQ_API_BASE: https://api.groq.com/openai/v1
      OPENAI_API_BASE: https://api.openai.com/v1
      PYTHONUTF8: "1"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Preflight: provider keys present?"
        id: preflight
        shell: bash
        run: |
          set -euo pipefail
          provider="${PROVIDER}"
          allow="${ALLOW_MOCK}"
          if [[ "$provider" == "groq" ]]; then
            if [[ -z "${GROQ_API_KEY}" ]]; then
              if [[ "$allow" == "true" ]]; then
                echo "::warning:: GROQ_API_KEY missing → switching provider=mock"
                echo "provider=mock" >> $GITHUB_OUTPUT
              else
                echo "::error:: GROQ_API_KEY is not set. Add it in Settings → Secrets, or set allow_mock_fallback=true."
                exit 1
              fi
            else
              echo "::notice:: GROQ_API_KEY detected"
              echo "provider=groq" >> $GITHUB_OUTPUT
            fi
          elif [[ "$provider" == "openai" ]]; then
            if [[ -z "${OPENAI_API_KEY}" ]]; then
              if [[ "$allow" == "true" ]]; then
                echo "::warning:: OPENAI_API_KEY missing → switching provider=mock"
                echo "provider=mock" >> $GITHUB_OUTPUT
              else
                echo "::error:: OPENAI_API_KEY is not set. Add it in Settings → Secrets, or set allow_mock_fallback=true."
                exit 1
              fi
            else
              echo "::notice:: OPENAI_API_KEY detected"
              echo "provider=openai" >> $GITHUB_OUTPUT
            fi
          else
            echo "provider=mock" >> $GITHUB_OUTPUT
          fi

      - name: Install repo (if any reqs)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Translate NL threats → cases
        run: |
          python tools/mvp_translate.py \
            --spec specs/mvp_threats.yaml \
            --seed "${SEED}" \
            --out cases_mvp.jsonl

      - name: Run attempts (straight-through)
        env:
          EFFECTIVE_PROVIDER: ${{ steps.preflight.outputs.provider }}
        run: |
          RUN_ID="$(date +%Y%m%d-%H%M%S)"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          python tools/mvp_run.py \
            --cases cases_mvp.jsonl \
            --provider "${EFFECTIVE_PROVIDER}" \
            --model "${MODEL_ID}" \
            --temperature "${TEMPERATURE}" \
            --trials "${TRIALS}" \
            --run-dir "results/${RUN_ID}" \
            --groq-base "${GROQ_API_BASE}" \
            --openai-base "${OPENAI_API_BASE}" \
            --allow-mock-fallback "${ALLOW_MOCK}"

      - name: Verify results
        run: |
          python tools/mvp_verify.py \
            --rows "results/${RUN_ID}/rows.jsonl" \
            --spec specs/mvp_threats.yaml \
            --out "results/${RUN_ID}/summary.csv"

      - name: Build minimal report
        run: |
          python tools/mvp_report_min.py \
            --rows "results/${RUN_ID}/rows.jsonl" \
            --summary "results/${RUN_ID}/summary.csv" \
            --out "results/${RUN_ID}/index.html"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ env.RUN_ID }}
          path: results/${{ env.RUN_ID }}
